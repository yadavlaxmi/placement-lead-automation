import smtplib
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import List, Dict, Any
import config
from database.database import DatabaseManager

class EmailNotifier:
    def __init__(self):
        self.db = DatabaseManager()
        self.smtp_server = config.SMTP_SERVER
        self.smtp_port = config.SMTP_PORT
        self.username = config.SMTP_USERNAME
        self.password = config.SMTP_PASSWORD
        
    def send_daily_job_report(self):
        """Send daily job report to placement team and students"""
        try:
            # Get fresher-friendly jobs
            jobs = self.db.get_fresher_friendly_jobs(limit=100)
            
            if not jobs:
                logging.info("No fresher-friendly jobs found for daily report")
                return
            
            # Create email content
            subject = f"Daily Job Report - {len(jobs)} Fresher-Friendly Positions"
            content = self._create_job_report_content(jobs)
            
            # Send to placement team
            if config.PLACEMENT_TEAM_EMAIL:
                self._send_email(config.PLACEMENT_TEAM_EMAIL, subject, content)
            
            # Send to students
            if config.STUDENTS_EMAIL:
                self._send_email(config.STUDENTS_EMAIL, subject, content)
            
            logging.info(f"Daily job report sent successfully")
            
        except Exception as e:
            logging.error(f"Error sending daily job report: {e}")
    
    def _create_job_report_content(self, jobs: List[Dict[str, Any]]) -> str:
        """Create HTML content for job report email"""
        html_content = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #4CAF50; color: white; padding: 20px; text-align: center; }}
                .job-card {{ border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }}
                .job-title {{ font-size: 18px; font-weight: bold; color: #2196F3; }}
                .job-details {{ margin: 10px 0; }}
                .score {{ background-color: #FF9800; color: white; padding: 2px 8px; border-radius: 3px; font-size: 12px; }}
                .footer {{ margin-top: 30px; text-align: center; color: #666; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>ðŸš€ Daily Job Report</h1>
                <p>Found {len(jobs)} fresher-friendly positions today!</p>
            </div>
            
            <h2>Top Fresher-Friendly Jobs</h2>
        """
        
        # Add job cards
        for i, job in enumerate(jobs[:20]):  # Show top 20 jobs
            html_content += f"""
            <div class="job-card">
                <div class="job-title">{job.get('message_text', 'Job Post')[:100]}...</div>
                <div class="job-details">
                    <strong>Group:</strong> {job.get('group_name', 'Unknown')}<br>
                    <strong>Overall Score:</strong> <span class="score">{job.get('overall_score', 0):.1f}/10</span><br>
                    <strong>Fresher Friendly:</strong> <span class="score">{job.get('fresher_friendly_score', 0):.1f}/10</span><br>
                    <strong>Remote Work:</strong> <span class="score">{job.get('remote_score', 0):.1f}/10</span>
                </div>
            </div>
            """
        
        html_content += """
            <div class="footer">
                <p>This report is automatically generated by the Telegram Job Scraper</p>
                <p>Total jobs analyzed today: """ + str(len(jobs)) + """</p>
            </div>
        </body>
        </html>
        """
        
        return html_content
    
    def _send_email(self, recipient: str, subject: str, content: str):
        """Send email to recipient"""
        try:
            msg = MIMEMultipart('alternative')
            msg['Subject'] = subject
            msg['From'] = self.username
            msg['To'] = recipient
            
            # Create HTML part
            html_part = MIMEText(content, 'html')
            msg.attach(html_part)
            
            # Send email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.username, self.password)
                server.send_message(msg)
            
            logging.info(f"Email sent successfully to {recipient}")
            
        except Exception as e:
            logging.error(f"Failed to send email to {recipient}: {e}")
    
    def send_urgent_job_alert(self, job_data: Dict[str, Any]):
        """Send urgent job alert for high-quality positions"""
        try:
            subject = "ðŸš¨ Urgent: High-Quality Job Opportunity!"
            content = self._create_urgent_job_content(job_data)
            
            # Send to placement team
            if config.PLACEMENT_TEAM_EMAIL:
                self._send_email(config.PLACEMENT_TEAM_EMAIL, subject, content)
            
        except Exception as e:
            logging.error(f"Error sending urgent job alert: {e}")
    
    def _create_urgent_job_content(self, job_data: Dict[str, Any]) -> str:
        """Create content for urgent job alert"""
        return f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .urgent {{ background-color: #f44336; color: white; padding: 20px; text-align: center; }}
                .job-details {{ border: 2px solid #f44336; margin: 20px 0; padding: 20px; border-radius: 5px; }}
                .score {{ background-color: #FF9800; color: white; padding: 5px 10px; border-radius: 3px; }}
            </style>
        </head>
        <body>
            <div class="urgent">
                <h1>ðŸš¨ URGENT JOB ALERT</h1>
                <p>High-quality position detected!</p>
            </div>
            
            <div class="job-details">
                <h2>Job Details</h2>
                <p><strong>Message:</strong> {job_data.get('message_text', 'N/A')[:200]}...</p>
                <p><strong>Group:</strong> {job_data.get('group_name', 'Unknown')}</p>
                <p><strong>Overall Score:</strong> <span class="score">{job_data.get('overall_score', 0):.1f}/10</span></p>
                <p><strong>Fresher Friendly:</strong> <span class="score">{job_data.get('fresher_friendly_score', 0):.1f}/10</span></p>
                <p><strong>Remote Work:</strong> <span class="score">{job_data.get('remote_score', 0):.1f}/10</span></p>
            </div>
            
            <p><em>This alert was automatically generated for high-scoring job posts.</em></p>
        </body>
        </html>
        """ 